From 0fad2179c0b760157abcf2ae5ceca7c8f396fadd Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Sat, 29 Jun 2019 12:13:28 +0800
Subject: [PATCH] disable ntp support

The upstream RHEL7 use chrony.service to support ntp,
it did not exist in oe-core, so remove it.

Do not support NTP, here are the reasons:
- For systemd based, it already had NTP supported,
  another ntp will cause confliction.

- We also need to consider the situation of sysvinit
  based system, it requires a ntp package to be
  installed.

Upstream-Status: Inappropriate [oe specific]

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>

Update patch context for anaconda 32. It uses dbus modules to handle
ntp, so update patch accordingly.

And remove 'chrony' from package requirements too.

Signed-off-by: Kai Kang <kai.kang@windriver.com>
---
 pyanaconda/installation.py                    | 10 +--
 pyanaconda/ui/gui/spokes/datetime_spoke.glade | 74 -----------------------
 pyanaconda/ui/gui/spokes/datetime_spoke.py    | 87 ---------------------------
 3 files changed, 1 insertion(+), 170 deletions(-)

diff --git a/pyanaconda/installation.py b/pyanaconda/installation.py
index 4f8f1295f..65fc0c089 100644
--- a/pyanaconda/installation.py
+++ b/pyanaconda/installation.py
@@ -260,11 +257,6 @@ def _prepare_installation(payload, ksdata):
     pre_install = TaskQueue("Pre install tasks", N_("Running pre-installation tasks"))
     # Setup timezone and add chrony as package if timezone was set in KS
     # and "-chrony" wasn't in packages section and/or --nontp wasn't set.
-    timezone_proxy = TIMEZONE.get_proxy()
-    ntp_excluded = timezone.NTP_PACKAGE in ksdata.packages.excludedList
-    pre_install.append_dbus_tasks(
-        TIMEZONE, [timezone_proxy.ConfigureNTPServiceEnablementWithTask(ntp_excluded)]
-    )
 
     # make name resolution work for rpm scripts in chroot
     if conf.system.provides_resolver_config:
@@ -290,7 +282,7 @@ def _prepare_installation(payload, ksdata):
         # add package requirements from modules
         # - iterate over all modules we know have valid package requirements
         # - add any requirements found to the payload requirement tracking
-        modules_with_package_requirements = [SECURITY, NETWORK, TIMEZONE, STORAGE]
+        modules_with_package_requirements = [SECURITY, NETWORK, STORAGE]
         for module in modules_with_package_requirements:
             module_proxy = module.get_proxy()
             module_requirements = Requirement.from_structure_list(module_proxy.CollectRequirements())
diff --git a/pyanaconda/ui/gui/spokes/datetime_spoke.glade b/pyanaconda/ui/gui/spokes/datetime_spoke.glade
index 37c7c6edc..875cfea21 100644
--- a/pyanaconda/ui/gui/spokes/datetime_spoke.glade
+++ b/pyanaconda/ui/gui/spokes/datetime_spoke.glade
@@ -460,80 +460,6 @@
                                 <property name="position">3</property>
                               </packing>
                             </child>
-                            <child>
-                              <object class="GtkAlignment" id="alignment4">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="xalign">1</property>
-                                <property name="xscale">0.20000000298023224</property>
-                                <property name="right_padding">24</property>
-                                <child>
-                                  <object class="GtkBox" id="box6">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="halign">end</property>
-                                    <child>
-                                      <object class="GtkLabel" id="networkTimeLabel">
-                                        <property name="visible">True</property>
-                                        <property name="can_focus">False</property>
-                                        <property name="label" translatable="yes" context="GUI|Date and Time">_Network Time</property>
-                                        <property name="use_underline">True</property>
-                                        <property name="mnemonic_widget">networkTimeSwitch</property>
-                                      </object>
-                                      <packing>
-                                        <property name="expand">False</property>
-                                        <property name="fill">True</property>
-                                        <property name="padding">3</property>
-                                        <property name="position">0</property>
-                                      </packing>
-                                    </child>
-                                    <child>
-                                      <object class="GtkSwitch" id="networkTimeSwitch">
-                                        <property name="visible">True</property>
-                                        <property name="can_focus">True</property>
-                                        <signal name="notify::active" handler="on_ntp_switched" swapped="no"/>
-                                        <child internal-child="accessible">
-                                          <object class="AtkObject" id="networkTimeSwitch-atkobject">
-                                            <property name="AtkObject::accessible-name" translatable="yes">Use Network Time</property>
-                                          </object>
-                                        </child>
-                                      </object>
-                                      <packing>
-                                        <property name="expand">False</property>
-                                        <property name="fill">True</property>
-                                        <property name="padding">1</property>
-                                        <property name="position">1</property>
-                                      </packing>
-                                    </child>
-                                    <child>
-                                      <object class="GtkButton" id="ntpConfigButton">
-                                        <property name="visible">True</property>
-                                        <property name="can_focus">True</property>
-                                        <property name="receives_default">True</property>
-                                        <property name="image">configImage</property>
-                                        <signal name="clicked" handler="on_ntp_config_clicked" swapped="no"/>
-                                        <child internal-child="accessible">
-                                          <object class="AtkObject" id="ntpConfigButton-atkobject">
-                                            <property name="AtkObject::accessible-name" translatable="yes">Configure NTP</property>
-                                          </object>
-                                        </child>
-                                      </object>
-                                      <packing>
-                                        <property name="expand">False</property>
-                                        <property name="fill">True</property>
-                                        <property name="padding">1</property>
-                                        <property name="position">2</property>
-                                      </packing>
-                                    </child>
-                                  </object>
-                                </child>
-                              </object>
-                              <packing>
-                                <property name="expand">True</property>
-                                <property name="fill">True</property>
-                                <property name="position">4</property>
-                              </packing>
-                            </child>
                           </object>
                         </child>
                       </object>
diff --git a/pyanaconda/ui/gui/spokes/datetime_spoke.py b/pyanaconda/ui/gui/spokes/datetime_spoke.py
index aa7bc2ed7..cab0559e4 100644
--- a/pyanaconda/ui/gui/spokes/datetime_spoke.py
+++ b/pyanaconda/ui/gui/spokes/datetime_spoke.py
@@ -502,8 +502,6 @@ class DatetimeSpoke(FirstbootSpokeMixIn, NormalSpoke):
         self._year_format, suffix = formats[widgets.index(year_box)]
         year_label.set_text(suffix)
 
-        self._ntpSwitch = self.builder.get_object("networkTimeSwitch")
-
         self._regions_zones = get_all_regions_and_timezones()
 
         # Set the initial sensitivity of the AM/PM toggle based on the time-type selected
@@ -512,9 +510,6 @@ class DatetimeSpoke(FirstbootSpokeMixIn, NormalSpoke):
         if not conf.system.can_set_system_clock:
             self._hide_date_time_setting()
 
-        self._config_dialog = NTPconfigDialog(self.data, self._timezone_module)
-        self._config_dialog.initialize()
-
         threadMgr.add(AnacondaThread(name=constants.THREAD_DATE_TIME,
                                      target=self._initialize))
 
@@ -602,8 +597,6 @@ class DatetimeSpoke(FirstbootSpokeMixIn, NormalSpoke):
             # TODO: seen should be set from the module
             self._kickstarted = False
 
-        self._timezone_module.SetNTPEnabled(self._ntpSwitch.get_active())
-
     def execute(self):
         if self._update_datetime_timer is not None:
             self._update_datetime_timer.cancel()
@@ -641,20 +634,6 @@ class DatetimeSpoke(FirstbootSpokeMixIn, NormalSpoke):
 
         self._update_datetime()
 
-        has_active_network = self._network_module.Connected
-        if not has_active_network:
-            self._show_no_network_warning()
-        else:
-            self.clear_info()
-            gtk_call_once(self._config_dialog.refresh_servers_state)
-
-        if conf.system.can_set_time_synchronization:
-            ntp_working = has_active_network and util.service_running(NTP_SERVICE)
-        else:
-            ntp_working = self._timezone_module.NTPEnabled
-
-        self._ntpSwitch.set_active(ntp_working)
-
     @async_action_wait
     def _set_timezone(self, timezone):
         """
@@ -1114,70 +1093,4 @@ class DatetimeSpoke(FirstbootSpokeMixIn, NormalSpoke):
         footer_alignment = self.builder.get_object("footerAlignment")
         footer_alignment.set_sensitive(sensitive)
 
-    def _show_no_network_warning(self):
-        self.set_warning(_("You need to set up networking first if you "\
-                           "want to use NTP"))
-
-    def _show_no_ntp_server_warning(self):
-        self.set_warning(_("You have no working NTP server configured"))
-
-    def on_ntp_switched(self, switch, *args):
-        if switch.get_active():
-            #turned ON
-            if not conf.system.can_set_time_synchronization:
-                #cannot touch runtime system, not much to do here
-                return
-
-            if not self._network_module.Connected:
-                self._show_no_network_warning()
-                switch.set_active(False)
-                return
-            else:
-                self.clear_info()
-
-                working_server = self._config_dialog.working_server
-                if working_server is None:
-                    self._show_no_ntp_server_warning()
-                else:
-                    #we need a one-time sync here, because chronyd would not change
-                    #the time as drastically as we need
-                    ntp.one_time_sync_async(working_server)
-
-            ret = util.start_service(NTP_SERVICE)
-            self._set_date_time_setting_sensitive(False)
-
-            #if starting chronyd failed and chronyd is not running,
-            #set switch back to OFF
-            if (ret != 0) and not util.service_running(NTP_SERVICE):
-                switch.set_active(False)
-
-        else:
-            #turned OFF
-            if not conf.system.can_set_time_synchronization:
-                #cannot touch runtime system, nothing to do here
-                return
-
-            self._set_date_time_setting_sensitive(True)
-            ret = util.stop_service(NTP_SERVICE)
-
-            #if stopping chronyd failed and chronyd is running,
-            #set switch back to ON
-            if (ret != 0) and util.service_running(NTP_SERVICE):
-                switch.set_active(True)
-
-            self.clear_info()
-
-    def on_ntp_config_clicked(self, *args):
-        self._config_dialog.refresh()
 
-        with self.main_window.enlightbox(self._config_dialog.window):
-            response = self._config_dialog.run()
-
-        if response == 1:
-            pools, servers = self._config_dialog.pools_servers
-            self._timezone_module.SetNTPServers(ntp.pools_servers_to_internal(pools, servers))
-
-            if self._config_dialog.working_server is None:
-                self._show_no_ntp_server_warning()
-            else:
-                self.clear_info()
-- 
2.7.4

